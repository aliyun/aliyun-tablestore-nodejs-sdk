// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @enum {number}
 */
var DataType = {
  NONE: 0,
  LONG: 1,
  BOOLEAN: 2,
  DOUBLE: 3,
  STRING: 4,
  BINARY: 5,
  STRING_RLE: 6
};

/**
 * @enum {string}
 */
var DataTypeName = {
  0: 'NONE',
  1: 'LONG',
  2: 'BOOLEAN',
  3: 'DOUBLE',
  4: 'STRING',
  5: 'BINARY',
  6: 'STRING_RLE'
};

/**
 * @constructor
 */
function BytesValue() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {BytesValue}
 */
BytesValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {BytesValue=} obj
 * @returns {BytesValue}
 */
BytesValue.getRootAsBytesValue = function(bb, obj) {
  return (obj || new BytesValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
BytesValue.prototype.value = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
BytesValue.prototype.valueLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
BytesValue.prototype.valueArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
BytesValue.startBytesValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
BytesValue.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(0, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
BytesValue.createValueVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
BytesValue.startValueVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
BytesValue.endBytesValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 * @returns {flatbuffers.Offset}
 */
BytesValue.createBytesValue = function(builder, valueOffset) {
  BytesValue.startBytesValue(builder);
  BytesValue.addValue(builder, valueOffset);
  return BytesValue.endBytesValue(builder);
}

/**
 * @constructor
 */
function RLEStringValues() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {RLEStringValues}
 */
RLEStringValues.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {RLEStringValues=} obj
 * @returns {RLEStringValues}
 */
RLEStringValues.getRootAsRLEStringValues = function(bb, obj) {
  return (obj || new RLEStringValues).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
RLEStringValues.prototype.array = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
RLEStringValues.prototype.arrayLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
RLEStringValues.prototype.indexMapping = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
RLEStringValues.prototype.indexMappingLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
RLEStringValues.prototype.indexMappingArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
RLEStringValues.startRLEStringValues = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} arrayOffset
 */
RLEStringValues.addArray = function(builder, arrayOffset) {
  builder.addFieldOffset(0, arrayOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
RLEStringValues.createArrayVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
RLEStringValues.startArrayVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indexMappingOffset
 */
RLEStringValues.addIndexMapping = function(builder, indexMappingOffset) {
  builder.addFieldOffset(1, indexMappingOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
RLEStringValues.createIndexMappingVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
RLEStringValues.startIndexMappingVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
RLEStringValues.endRLEStringValues = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} arrayOffset
 * @param {flatbuffers.Offset} indexMappingOffset
 * @returns {flatbuffers.Offset}
 */
RLEStringValues.createRLEStringValues = function(builder, arrayOffset, indexMappingOffset) {
  RLEStringValues.startRLEStringValues(builder);
  RLEStringValues.addArray(builder, arrayOffset);
  RLEStringValues.addIndexMapping(builder, indexMappingOffset);
  return RLEStringValues.endRLEStringValues(builder);
}

/**
 * @constructor
 */
function ColumnValues() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {ColumnValues}
 */
ColumnValues.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ColumnValues=} obj
 * @returns {ColumnValues}
 */
ColumnValues.getRootAsColumnValues = function(bb, obj) {
  return (obj || new ColumnValues).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {boolean}
 */
ColumnValues.prototype.isNullvalues = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
};

/**
 * @returns {number}
 */
ColumnValues.prototype.isNullvaluesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
ColumnValues.prototype.isNullvaluesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {flatbuffers.Long}
 */
ColumnValues.prototype.longValues = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);
};

/**
 * @returns {number}
 */
ColumnValues.prototype.longValuesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {boolean}
 */
ColumnValues.prototype.boolValues = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
};

/**
 * @returns {number}
 */
ColumnValues.prototype.boolValuesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
ColumnValues.prototype.boolValuesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
ColumnValues.prototype.doubleValues = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns {number}
 */
ColumnValues.prototype.doubleValuesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float64Array}
 */
ColumnValues.prototype.doubleValuesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
ColumnValues.prototype.stringValues = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
ColumnValues.prototype.stringValuesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {BytesValue=} obj
 * @returns {BytesValue}
 */
ColumnValues.prototype.binaryValues = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new BytesValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
ColumnValues.prototype.binaryValuesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {RLEStringValues=} obj
 * @returns {RLEStringValues|null}
 */
ColumnValues.prototype.rleStringValues = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new RLEStringValues).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
ColumnValues.startColumnValues = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} isNullvaluesOffset
 */
ColumnValues.addIsNullvalues = function(builder, isNullvaluesOffset) {
  builder.addFieldOffset(0, isNullvaluesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<boolean>} data
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createIsNullvaluesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(+data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ColumnValues.startIsNullvaluesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} longValuesOffset
 */
ColumnValues.addLongValues = function(builder, longValuesOffset) {
  builder.addFieldOffset(1, longValuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Long>} data
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createLongValuesVector = function(builder, data) {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ColumnValues.startLongValuesVector = function(builder, numElems) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boolValuesOffset
 */
ColumnValues.addBoolValues = function(builder, boolValuesOffset) {
  builder.addFieldOffset(2, boolValuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<boolean>} data
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createBoolValuesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(+data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ColumnValues.startBoolValuesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} doubleValuesOffset
 */
ColumnValues.addDoubleValues = function(builder, doubleValuesOffset) {
  builder.addFieldOffset(3, doubleValuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createDoubleValuesVector = function(builder, data) {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ColumnValues.startDoubleValuesVector = function(builder, numElems) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stringValuesOffset
 */
ColumnValues.addStringValues = function(builder, stringValuesOffset) {
  builder.addFieldOffset(4, stringValuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createStringValuesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ColumnValues.startStringValuesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} binaryValuesOffset
 */
ColumnValues.addBinaryValues = function(builder, binaryValuesOffset) {
  builder.addFieldOffset(5, binaryValuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createBinaryValuesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ColumnValues.startBinaryValuesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rleStringValuesOffset
 */
ColumnValues.addRleStringValues = function(builder, rleStringValuesOffset) {
  builder.addFieldOffset(6, rleStringValuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
ColumnValues.endColumnValues = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} isNullvaluesOffset
 * @param {flatbuffers.Offset} longValuesOffset
 * @param {flatbuffers.Offset} boolValuesOffset
 * @param {flatbuffers.Offset} doubleValuesOffset
 * @param {flatbuffers.Offset} stringValuesOffset
 * @param {flatbuffers.Offset} binaryValuesOffset
 * @param {flatbuffers.Offset} rleStringValuesOffset
 * @returns {flatbuffers.Offset}
 */
ColumnValues.createColumnValues = function(builder, isNullvaluesOffset, longValuesOffset, boolValuesOffset, doubleValuesOffset, stringValuesOffset, binaryValuesOffset, rleStringValuesOffset) {
  ColumnValues.startColumnValues(builder);
  ColumnValues.addIsNullvalues(builder, isNullvaluesOffset);
  ColumnValues.addLongValues(builder, longValuesOffset);
  ColumnValues.addBoolValues(builder, boolValuesOffset);
  ColumnValues.addDoubleValues(builder, doubleValuesOffset);
  ColumnValues.addStringValues(builder, stringValuesOffset);
  ColumnValues.addBinaryValues(builder, binaryValuesOffset);
  ColumnValues.addRleStringValues(builder, rleStringValuesOffset);
  return ColumnValues.endColumnValues(builder);
}

/**
 * @constructor
 */
function SQLResponseColumn() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SQLResponseColumn}
 */
SQLResponseColumn.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SQLResponseColumn=} obj
 * @returns {SQLResponseColumn}
 */
SQLResponseColumn.getRootAsSQLResponseColumn = function(bb, obj) {
  return (obj || new SQLResponseColumn).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SQLResponseColumn.prototype.columnName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {DataType}
 */
SQLResponseColumn.prototype.columnType = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {DataType} */ (this.bb.readInt8(this.bb_pos + offset)) : DataType.NONE;
};

/**
 * @param {ColumnValues=} obj
 * @returns {ColumnValues|null}
 */
SQLResponseColumn.prototype.columnValue = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new ColumnValues).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SQLResponseColumn.startSQLResponseColumn = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnNameOffset
 */
SQLResponseColumn.addColumnName = function(builder, columnNameOffset) {
  builder.addFieldOffset(0, columnNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {DataType} columnType
 */
SQLResponseColumn.addColumnType = function(builder, columnType) {
  builder.addFieldInt8(1, columnType, DataType.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnValueOffset
 */
SQLResponseColumn.addColumnValue = function(builder, columnValueOffset) {
  builder.addFieldOffset(2, columnValueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SQLResponseColumn.endSQLResponseColumn = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnNameOffset
 * @param {DataType} columnType
 * @param {flatbuffers.Offset} columnValueOffset
 * @returns {flatbuffers.Offset}
 */
SQLResponseColumn.createSQLResponseColumn = function(builder, columnNameOffset, columnType, columnValueOffset) {
  SQLResponseColumn.startSQLResponseColumn(builder);
  SQLResponseColumn.addColumnName(builder, columnNameOffset);
  SQLResponseColumn.addColumnType(builder, columnType);
  SQLResponseColumn.addColumnValue(builder, columnValueOffset);
  return SQLResponseColumn.endSQLResponseColumn(builder);
}

/**
 * @constructor
 */
function SQLResponseColumns() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SQLResponseColumns}
 */
SQLResponseColumns.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SQLResponseColumns=} obj
 * @returns {SQLResponseColumns}
 */
SQLResponseColumns.getRootAsSQLResponseColumns = function(bb, obj) {
  return (obj || new SQLResponseColumns).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {SQLResponseColumn=} obj
 * @returns {SQLResponseColumn}
 */
SQLResponseColumns.prototype.columns = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new SQLResponseColumn).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
SQLResponseColumns.prototype.columnsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {flatbuffers.Long}
 */
SQLResponseColumns.prototype.rowCount = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
SQLResponseColumns.startSQLResponseColumns = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnsOffset
 */
SQLResponseColumns.addColumns = function(builder, columnsOffset) {
  builder.addFieldOffset(0, columnsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
SQLResponseColumns.createColumnsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
SQLResponseColumns.startColumnsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} rowCount
 */
SQLResponseColumns.addRowCount = function(builder, rowCount) {
  builder.addFieldInt64(1, rowCount, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SQLResponseColumns.endSQLResponseColumns = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
SQLResponseColumns.finishSQLResponseColumnsBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnsOffset
 * @param {flatbuffers.Long} rowCount
 * @returns {flatbuffers.Offset}
 */
SQLResponseColumns.createSQLResponseColumns = function(builder, columnsOffset, rowCount) {
  SQLResponseColumns.startSQLResponseColumns(builder);
  SQLResponseColumns.addColumns(builder, columnsOffset);
  SQLResponseColumns.addRowCount(builder, rowCount);
  return SQLResponseColumns.endSQLResponseColumns(builder);
}

// Exports for Node.js and RequireJS
this.DataType = DataType;
this.DataTypeName = DataTypeName;
this.BytesValue = BytesValue;
this.RLEStringValues = RLEStringValues;
this.ColumnValues = ColumnValues;
this.SQLResponseColumn = SQLResponseColumn;
this.SQLResponseColumns = SQLResponseColumns;
